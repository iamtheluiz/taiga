# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
- name: RELEASE_GREETING_MESSAGE
  displayName: Escreva uma mensagem de boas vindas
  type: string
- name: TAIGA_DEFAULT_IMAGE
  displayName: Escolha a imagem padrão da aplicação
  type: string
  values:
  - animated-taiga-clap
  - animated-taiga-haha
  - animated-taiga-he
  - animated-taiga-hunf
  - animated-taiga-shy
  - animated-taiga-smile
  - animated-taiga-surprise
  - animated-taiga-v
  - animated-taiga-what
  - taiga-shy
  - taiga-surprise
  - taiga-wait

variables:
- name: SONAR_PROJECT_KEY
  value: Taiga
- name: SONAR_PROJECT_NAME
  value: Taiga
- name: DOTNET_PUBLISH_OUTDIR
  value: ../out/Taiga-win32-x64/resources
- name: REPORT_LOGO
  value: https://github.com/iamtheluiz/taiga/blob/master/.github/icon.jpg?raw=true
- name: REPORT_APPLICATION
  value: Taiga
- name: REPORT_DESCRIPTION
  value: 🐯 Taiga is a speech recognition app that executes registered voice commands.
- name: REPORT_OUTPUT
  value: report

trigger: none

jobs:
- job: build
  displayName: Build Package
  pool: MyPC
  steps:
    - task: SonarCloudPrepare@1
      displayName: Prepare Sonar Analysis
      inputs:
        SonarCloud: 'SonnarCloud'
        organization: 'iamtheluiz'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(SONAR_PROJECT_KEY)'
        cliProjectName: '$(SONAR_PROJECT_NAME)'
        cliSources: '.'
        extraProperties: |
          sonar.typescript.lcov.reportPaths=./coverage/lcov.info

    - task: UseDotNet@2
      displayName: Use DotNet 6.x
      inputs:
        packageType: 'sdk'
        version: '6.x'
    
    - task: NodeTool@0
      displayName: Use Node 16.x
      inputs:
        versionSpec: '16.x'
    
    - task: Npm@1
      displayName: Install Node Dependencies
      inputs:
        command: 'install'
        workingDir: '.'

    - task: Npm@1
      displayName: Code Lint
      inputs:
        command: 'custom'
        workingDir: '.'
        customCommand: 'run lint'

    - task: Npm@1
      displayName: Code Test
      continueOnError: true
      inputs:
        command: 'custom'
        workingDir: '.'
        customCommand: 'run test'

    - task: PublishTestResults@2
      displayName: Publish Test Result
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'junit.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/coverage/lcov-report'
    
    - task: PowerShell@2
      displayName: Create Package
      inputs:
        targetType: 'inline'
        script: |
          Write-Host $env:RELEASE_GREETING_MESSAGE
          Write-Host $env:TAIGA_DEFAULT_IMAGE
          npm run package:ci
      env:
        RELEASE_GREETING_MESSAGE: ${{ parameters.RELEASE_GREETING_MESSAGE }}
        TAIGA_DEFAULT_IMAGE: ${{ parameters.TAIGA_DEFAULT_IMAGE }}
      
    - task: DotNetCoreCLI@2
      displayName: Restore DotNet Dependencies
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: Publish DotNet Projet
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/*.csproj'
        arguments: '-c Release -o $(DOTNET_PUBLISH_OUTDIR)'
        zipAfterPublish: false
        modifyOutputPath: false
        workingDirectory: './TaigaRecognition'

    - task: Gitleaks@2
      inputs:
        scanlocation: '$(Build.SourcesDirectory)'
        configtype: 'predefined'
        predefinedconfigfile: 'GitleaksUdmCombo.toml'
        scanmode: 'all'
        reportformat: 'sarif'

    - task: SonarCloudAnalyze@1
      displayName: Sonar Run Code Analysis

    - task: SonarCloudPublish@1
      displayName: Sonar Publish Quality Gate
      inputs:
        pollingTimeoutSec: '300'

    - task: sonarcloud-buildbreaker@2
      displayName: Sonar Build Breaker
      inputs:
        SonarCloud: 'SonnarCloud'
        organization: 'iamtheluiz'
    
    - task: CopyFiles@2
      displayName: Copy Files
      inputs:
        SourceFolder: './out'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: 'ls'
    
    - task: Npm@1
      displayName: Install taiga-report
      inputs:
        command: 'custom'
        workingDir: '.'
        customCommand: 'install -g taiga-report'
        customRegistry: 'useFeed'
        customFeed: '03878c5b-cc53-42b8-9165-580aeebd9342/7c2a67a0-0264-4a36-9656-0ccabb462ccc'
    
    - task: PowerShell@2
      displayName: Get GIT log
      inputs:
        targetType: 'inline'
        script: |
          $OutputPath = ".\git-log.txt"
          
          git log --all --decorate --oneline --graph > $OutputPath
        workingDirectory: $(Build.SourcesDirectory)

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: 'taiga-report'
        workingDirectory: $(Build.SourcesDirectory)
      env:
        RELEASE_GREETING_MESSAGE: ${{ parameters.RELEASE_GREETING_MESSAGE }}
        TAIGA_DEFAULT_IMAGE: ${{ parameters.TAIGA_DEFAULT_IMAGE }}
        REPORT_LOGO: $(REPORT_LOGO)
        REPORT_APPLICATION: $(REPORT_APPLICATION)
        REPORT_DESCRIPTION: $(REPORT_DESCRIPTION)
        REPORT_BUILD_NAME: $(Build.BuildNumber)
        REPORT_TESTS_FILE: .\junit.xml
        REPORT_GIT_LOG_FILE: .\git-log.txt
        REPORT_SONAR_FILE: '$(Build.ArtifactStagingDirectory)\.sqAnalysis\SonarQubeBuildSummary.md'
        REPORT_OUTPUT: '$(Build.SourcesDirectory)\report'

    - task: publishhtmlreport@1
      inputs:
        htmlType: 'genericHTML'
        htmlPath: '$(Build.SourcesDirectory)\report\report-$(Build.BuildNumber).html'

    - task: CopyFiles@2
      displayName: Copy Files
      inputs:
        SourceFolder: '.\report'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\report'

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
